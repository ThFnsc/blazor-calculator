@page "/"
@inject IJSRuntime JsRuntime

<PageTitle>Calculadora</PageTitle>

<div class="container flex-xs flex-xs-center">
  <div class="row">
    <div class="col-md-12">
      <div class="card card-block mt-4">
        <EditForm Model="new{}">
            <Result @bind-Expression=_expression />
            <div class="form-group">
              <InputText @bind-Value=_answer class="form-control" readonly />
            </div>
        </EditForm>
        <div>
          <div class="flex-xs flex-xs-around my-1">
            <CalcBtn Value="C" Clicked=ClearExpression Color="accent" WidthPercentage=50 />
            <CalcBtn Value="/" Clicked=AssembleValue />
            <CalcBtn Value="*" Clicked=AssembleValue />
          </div>
          <div class="flex-xs flex-xs-around my-1">
            <CalcBtn Value="7" Clicked=AssembleValue />
            <CalcBtn Value="8" Clicked=AssembleValue />
            <CalcBtn Value="9" Clicked=AssembleValue />
            <CalcBtn Value="-" Clicked=AssembleValue />
          </div>
          <div class="flex-xs flex-xs-around my-1">
            <CalcBtn Value="6" Clicked=AssembleValue />
            <CalcBtn Value="5" Clicked=AssembleValue />
            <CalcBtn Value="4" Clicked=AssembleValue />
            <CalcBtn Value="+" Clicked=AssembleValue />
          </div>
          <div class="flex-xs flex-xs-around my-1">
            <CalcBtn Value="3" Clicked=AssembleValue />
            <CalcBtn Value="2" Clicked=AssembleValue />
            <CalcBtn Value="1" Clicked=AssembleValue />
            <CalcBtn Value="😉" Clicked=Irra />
          </div>
          <div class="flex-xs flex-xs-around my-1">
            <CalcBtn Value="0" Clicked=AssembleValue />
            <CalcBtn Value="." Clicked=AssembleValue />
            <CalcBtn Value="=" Clicked=EvaluateCalc Color="success" WidthPercentage=50 />
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@code {
    private string _expression = string.Empty, _answer = string.Empty;

    /// <summary>
    /// Adiciona os valores na variável
    /// </summary>
    private void AssembleValue(string value) =>
        _expression += value;

    /// <summary>
    /// Limpa cálculo
    /// </summary>
    private void ClearExpression() =>
        _expression = _answer = string.Empty;

    /// <summary>
    /// Realiza o cálculo passado
    /// </summary>
    private async Task EvaluateCalc() 
    {
        var result = await JsRuntime.InvokeAsync<decimal>(identifier: "evalCalc", _expression);
        _answer = result.ToString();
    }

    /// <summary>
    /// Só ignora isso aqui, UI things
    /// </summary>
    private Task Irra() =>
        JsRuntime.InvokeVoidAsync(identifier: "alert", "Nada por aqui, apenas ignore este botão... 🤫").AsTask();
}